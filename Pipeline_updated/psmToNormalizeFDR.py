'''
    This script uses the psm output file generated by percolator to further generate the psm, peptide and protein level reports and normalize the apex intensity generated from MOFF.
    It also calculates the fdr at psm, peptide and protein level. This script allows the user to use their own cutoff for the number of peptide and/or spectral count needed minimum 
    to declare a true protein.
        
    Created by Suresh Poudel on 03/15/2017
    Last modified 03/15/2017
    Copyright (c) 2017 Suresh Poudel (ORNL). All rights reserved.
    
    '''

from os import path
import os.path
import glob
import os
import sys
import fileinput
import numpy as np
from collections import defaultdict
import sys, os
from datetime import datetime
import re
from Bio import SeqIO
import subprocess
from decimal import Decimal

moff_result_path = sys.argv[1]
psmQval = sys.argv[2]
cruxDir = sys.argv[3]
#fasta = sys.argv[4]
pepCnt = sys.argv[4]
specCnt = sys.argv[5]

def fastaToProtLen(filename):
	protLenDict = {}
	FastaFile = open(filename, 'rU')

	for rec in SeqIO.parse(FastaFile, 'fasta'):
		name = rec.id
		seq = rec.seq
		seqLen = len(rec)
		protLenDict[name]=seqLen
		print name,'\t', seqLen

	FastaFile.close()
	return protLenDict

def maxIntensity(filename, outputFile, psm):
	dict1 = {}
	with open(filename,'r') as f:
		for line in f:
			if 'file_idx' not in line.strip():
				temp_line = line.strip().split('\t')
				if float(temp_line[7].strip()) <= float(psm):
					if (float(temp_line[-7].strip()) != -1) or (float(temp_line[-6].strip()) != -1):
						key = temp_line[0].strip()+'\t'+temp_line[-12].strip()+'\t'+temp_line[-11].strip()
						value = float(temp_line[-9].strip())
						if key in dict1:
							dict1[key].append(value)
						else:
							dict1[key] = [value]
	with open(outputFile,'w') as g:
		g.write('file_idx\tpeptide\tprotein\tmaxIntensity\n')
		for key in dict1.keys():
			if max(dict1[key])!= -1.0:
				maxVal = str(max(dict1[key]))
				keys = key.split("\t")
				g.write(keys[0]+'\t'+keys[1]+'\t'+keys[2]+'\t'+maxVal+'\n')
	return outputFile


def concatFiles(path, my_sample_lst, filelst, type):
	for my_sample in my_sample_lst:
		salt_cut = []
		for moff_file in filelst:
			if my_sample in moff_file:
				salt_cut.append(moff_file)

		with open(path+'/'+my_sample+type, 'w') as fout:
			fin = fileinput.input(salt_cut)
			for line in fin:
				fout.write(line)
			fin.close()
		

def protToDict(filename, col):
	d1 = {}
	with open(filename,'r') as f:
		for line in f:
			if 'totPepCnt' not in line.strip():

				temp_line=line.strip().split('\t')
				d1[temp_line[0].strip()] = temp_line[col].strip()
	return d1

def filesToList(file_col):
	protList = []
	for filename in file_col:
		with open(filename,'r') as f:
			for line in f:
				temp_line=line.strip().split('\t')
				val = temp_line[0].strip()
				if val not in protList:
					protList.append(val)

	return protList


def addValKey(d1, key, value):
	if key not in d1:
		d1[key] = [value]
	else:
		d1[key].append(value)
	return d1

def colToProtRep(filename, output1, pepNo, specNo):
	d1_pep = {}
	d2_spec = {}
	d3_moff = {}
	filProtLst = []
	with open(filename,'r') as f:
		for line in f:
			if 'maxIntensity' not in line.strip():
				temp_line = line.split('\t')
				prot_key = temp_line[0]+'\t'+temp_line[2]

				addValKey(d1_pep, prot_key, 1)
				addValKey(d2_spec, prot_key, int(temp_line[-2]))
				addValKey(d3_moff, prot_key, float(temp_line[-1]))
	
		with open(output1,'w') as g:
			g.write('file_id\tprot\tpepCnt\tspecCnt\tmaxIntensity\n')
			for key in d1_pep.keys():
				totalPep = sum(d1_pep[key])
				totalSpec = sum(d2_spec[key])
				
				if totalPep >= pepNo and totalSpec >= specNo:
					
					g.write(key+'\t'+str(sum(d1_pep[key]))+'\t'+str(sum(d2_spec[key]))+'\t'+str(sum(d3_moff[key]))+'\n')
				else:
					ne_key = key.split('\t')
					filProtLst.append(ne_key[1])


	return filProtLst


def fileToSample(filelist):
	sample_List=[]
	for items in filelist:
		sample = items.split('/')[-1].split('moff_result.txt')[0][0:-3]
		if sample not in sample_List:
			sample_List.append(sample)
	return sample_List

def fileTodict(filename, col1, col2, col3):
	dict1 = {}
	with open(filename,'r') as f:
		for line in f:
			temp_line = line.strip().split('\t')
			key = temp_line[col1].strip()+'\t'+temp_line[col2].strip()+'\t'+temp_line[col3].strip()
			
			if key not in dict1:
				dict1[key] = [1]
			else:
				dict1[key].append(1)

			# dict1[key] = line.strip()
	return dict1

def maxIntCon(filename):
	dic1 = {}
	with open(filename,'r') as f:
		for line in f:
			temp_line = line.strip().split('\t')
			dic1[temp_line[0]+'\t'+temp_line[1]] =  temp_line[2]
	return dic1



def findFolder(line):
	subdirect = line[-3]
	return subdirect

def findFile(eachFile):
	with open(eachFile,'r') as testFile:
		for test_line in testFile:
			# print test_line.strip()
			if 'COMMAND LINE:' in test_line:
				# print test_line.strip()
				te_line = test_line.strip().split()
				return te_line


# def maxPepInt(maxIntFile, pepQ):
def maxPepInt(maxIntFile, val2, outputF):
	
	pepDict = {}
	pepSpec = {}
	with open(maxIntFile,'r') as readMaxIntFile:
		for intLine in readMaxIntFile:
			if 'maxIntensity' not in intLine.strip():
				te_intLine = intLine.strip().split('\t')
				val1 = float(te_intLine[-1].strip())
				val = te_intLine[2].strip()
				new_val = val.split(',')
				if len(new_val) > 1:
					for x in range(0, len(new_val)):
						key1 = te_intLine[0].strip()[0:-3]+'\t'+te_intLine[1].strip()+'\t'+new_val[x]
						pepDict[key1] = val1
						# addValKey(pepDict,key1,val1)
						addValKey(pepSpec,key1,val2)

				else:
					key1 = te_intLine[0].strip()[0:-3]+'\t'+te_intLine[1].strip()+'\t'+te_intLine[2].strip()

					pepDict[key1] = val1
					# addValKey(pepDict,key1,val1)
					addValKey(pepSpec,key1,val2)
	with open(outputF,'w') as pep:
		pep.write('file_id\tpeptide\tprotein\tspecCnt\tmaxIntensity\n')
		for new_key in pepDict.keys():
			pep.write(new_key+'\t'+str(sum(pepSpec[new_key]))+'\t'+str(pepDict[new_key])+'\n')

	return outputF



def revPepPsm(filename, newPepFile, fil_list, col):
	
	with open(filename,'r') as p_read:
		for pepLines in p_read:
			te_pep = pepLines.split('\t')
			# print te_pep[2]
			if te_pep[col].strip() not in fil_list:
				with open(newPepFile,'a') as rev_pep:
					rev_pep.write(pepLines.strip()+'\n')
			




moff_txt = glob.glob(moff_result_path+'/'+'*_moff_result.txt')
fasta_list = glob.glob(cruxDir+'/*_New.fasta')
for files in moff_txt:
	temp_file = files.split('_moff_result.txt')[0]+'_new.txt'
	maxIntensity(files, temp_file, psmQval)

my_samples = fileToSample(moff_txt)

intensityFiles = glob.glob(moff_result_path+'/'+'*_new.txt')

psmReport = concatFiles(cruxDir, my_samples, moff_txt, '_psm_filtered_report.txt')
concatMaxMoff = concatFiles(cruxDir,my_samples, intensityFiles, '_NR_psm_maxMoff.txt')

moffMaxPsm = glob.glob(cruxDir+'/'+'*_NR_psm_maxMoff.txt')
# print moffMaxPsm

for x in moffMaxPsm:
	sam = x.split('_NR_psm_maxMoff.txt')[0]+'_sample_pep_report.txt'
	pepRep = maxPepInt(x,1,sam)

pepReports = glob.glob(cruxDir+'/'+'*_sample_pep_report.txt')

for y in pepReports:
	new_name = y.split('_sample_pep_report.txt')[0]+'_final_sample_prot_report.txt'
	new_name2 = y.split('_sample_pep_report.txt')[0]+'_final_sample_unfiltered_prot_report.txt'
	filteredProt=colToProtRep(y, new_name, int(pepCnt), int(specCnt))
	
fastaDict = {}
# print filteredProt
for new_fasta_file in fasta_list:
	fastaDict = fastaToProtLen(new_fasta_file)

protReports = glob.glob(cruxDir+'/'+'*_final_sample_prot_report.txt')

decLen = []
sampCnt = 0
sumMoff_int = 0

for protFile in protReports:
	sampCnt+=1
	normProt = protFile.split('_final_sample_prot_report.txt')[0]+'_final_normalized_prot_report.txt'
	unnormProt = protFile.split('_final_sample_prot_report.txt')[0]+'_final_unnormalized_prot_report.txt'

	uneachProtDict = {}
	eachProtDict = {}
	eachPepDict = {}
	normalDict = {}
	
	ML_Sum = 0
	pepSum = 0
	specSum = 0
	with open(protFile,'r') as protDict:
		for p_line in protDict:
			if 'maxIntensity' not in p_line:
				tp_line = p_line.split('\t')
				moff_Int = float(tp_line[-1])
				sumMoff_int += moff_Int
				
				ML = float(tp_line[-1])/fastaDict[tp_line[1]]
				
				pepSum = int(tp_line[2])
				specSum = int(tp_line[3])
				ML_Sum+=ML
				eachProtDict[tp_line[1]]=ML
				eachPepDict[tp_line[1]]=str(pepSum)+'\t'+str(specSum)

				
				uneachProtDict[tp_line[1]]=moff_Int
	
	with open(normProt,'w') as normFile, open(unnormProt, 'w') as unnormFile:
		normFile.write('file_id_protein\ttotPepCnt\ttotSpecCnt\tMoffperLen\tnormalizedMoff\n')
		unnormFile.write('file_id_protein\ttotPepCnt\ttotSpecCnt\tunnormalizedIntensity\n')
		for each_key in eachProtDict.keys():
			normInt = eachProtDict[each_key]/ML_Sum
			
			normFile.write(each_key+'\t'+eachPepDict[each_key]+'\t'+str(eachProtDict[each_key])+'\t'+str(normInt)+'\n')
			unnormFile.write(each_key+'\t'+eachPepDict[each_key]+'\t'+str(uneachProtDict[each_key])+'\n')

factor = float(sumMoff_int)/sampCnt
normProtFile = glob.glob(cruxDir+'/'+'*_final_normalized_prot_report.txt')
unnormProtFile = glob.glob(cruxDir+'/'+'*_final_unnormalized_prot_report.txt')
prot_List = filesToList(normProtFile)

# print factor


def files_to_one_dict(prot_file_list, out_file_ext, protein_list, fac_value):
	pep_dct = {}
	spec_dct = {}
	dd = defaultdict(list)
	for f1 in prot_file_list:
		dct = f1.split('.txt')
		dct[0]={}
		dct[0] = protToDict(f1,-1)
		with open(f1,'r') as new_f:
			for line2 in new_f:
				if 'protein' not in line2.strip():
					temp_line2 = line2.strip().split('\t')
					val_pep = int(temp_line2[1])
					val_spec = int(temp_line2[2])
					
					if temp_line2[0] not in pep_dct:
						
						pep_dct[temp_line2[0]] = [val_pep]
						spec_dct[temp_line2[0]] = [val_spec]
					else:
						pep_dct[temp_line2[0]].append(val_pep)
						spec_dct[temp_line2[0]].append(val_spec)
		
		dct[0].setdefault('protein', f1.strip().split(out_file_ext)[0].split('/')[-1])


		for key in protein_list:
			dct[0].setdefault(key, '')
			
		
		for key, value in dct[0].iteritems():
			if value!='' and 'protein' not in key:
			
				newVal = str(float(value)*fac_value)
				dd[key].append(newVal)
			else:
		
				dd[key].append(value)
	return dd, pep_dct, spec_dct





dd1, pep_dct1, spec_dct1 = files_to_one_dict(normProtFile,'_final_normalized_prot_report.txt',prot_List,factor)
dd2, pep_dct2, spec_dct2 = files_to_one_dict(unnormProtFile, '_final_unnormalized_prot_report.txt',prot_List,1)


head = '\t'.join(dd1['protein'])
header = 'totPepCnt\ttotSpecCnt\t'+head
head1 = '\t'.join(dd2['protein'])
header1 = 'totPepCnt\ttotSpecCnt\t'+head1

def file_to_final_files(file_final_ext, ddd, pep_dd, spec_dd, col_name):


	with open(file_final_ext,'a') as g:
		g.write('protein\t'+col_name+'\n')

	total_pepCnt = 0
	total_specCnt = 0
	pep_col = 0
	spec_col = 0
	for key in ddd.keys():
		if 'protein' not in key:
			pep_col = sum(pep_dd[key])
			spec_col = sum(spec_dd[key])
			total_pepCnt += pep_col
			total_specCnt += spec_col			
			value_row = '\t'.join(ddd[key])
			
			new_key = key.split('\t')
			with open(file_final_ext,'a') as g:
				g.write(key+'\t')
				g.write(str(pep_col)+'\t'+str(spec_col)+'\t'+str(value_row))
				g.write('\n') 
	with open(file_final_ext,'a') as g:
		g.write('total peptides count = '+str(total_pepCnt)+'\ntotal spectral count = '+str(total_specCnt))

os.chdir(cruxDir)
file_to_final_files('normalized_final_output.txt', dd1, pep_dct1, spec_dct1, header)
file_to_final_files('unnormalized_final_output.txt', dd2, pep_dct2, spec_dct2, header1)





for pepFiles in pepReports:

	newName = pepFiles.split('_sample_pep_report.txt')[0]
	psmFile = newName+'_psm_filtered_report.txt'
	nePepFile = newName+'_final_pep_report.txt'
	nePsmFile = newName+'_final_psm_report.txt'

	psmScan = revPepPsm(pepFiles, nePepFile,filteredProt,2)
	revPepPsm(psmFile,nePsmFile,filteredProt,11)
	
#for f1 in glob.glob(cruxDir+'/*.txt'):
#	if 'sample_pep' not in f1 or  '_final_' not in f1:
#		subprocess.call(['rm',f1])



























